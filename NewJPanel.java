/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.mkfractal;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.numbers.complex.Complex;

/**
 *
 * @author thorsten
 */
public class NewJPanel extends javax.swing.JPanel {

    class RenderThread extends Thread {

        int r = 0;

        double nr() {
            return rands[r++];
        }

        Complex f(Complex c) {
            r = 0;
            return c.pow(c.divide(c.add(Complex.ofCartesian(nr(), nr()))))
                    .multiply(c.divide(c.add(Complex.ofCartesian(nr(), nr()))))
                    .add(
                            Complex.ofCartesian(nr(), nr())
                                    .divide(c.add(Complex.ofCartesian(nr(), nr())))
                    );
        }

        int a0, a1, b0, b1;
        Graphics g;
        boolean compute = false;

        @Override
        public void run() {
            while (true) {
                while (!compute) try {
                    sleep(10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(NewJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                BufferedImage img = new BufferedImage(a1 - a0, b1 - b0, BufferedImage.TYPE_INT_RGB);

                for (int a = a0; a < a1; ++a) {
                    for (int b = b0; b < b1; ++b) {
                        Complex c = Complex.ofCartesian(
                                10 * (a / (double) getWidth() - 0.5),
                                10 * (b / (double) getHeight() - 0.5)
                        );

                        int i;
                        for (i = 0; i < 100; ++i) {
                            c = f(c);
                            if (c.abs() > 4) {
                                break;
                            }
                        }

                        int cr;
                        int cg;
                        int cb;

                        if (i >= 100) {
                            cr = cb = cg = 0;
                        } else {
                            cr = (int) (120 * (Math.sin(i * 0.1) + 1));
                            cb = (int) (120 * (Math.sin(i * 0.2) + 1));
                            cg = (int) (120 * (Math.sin(i * 0.3) + 1));
                        }
                        img.setRGB(a - a0, b - b0, cr | (cg << 8) | (cb << 16));
                    }
                }

                g.drawImage(img, a0, b0, null);
                compute = false;
            }
        }

    }

    RenderThread[] pool = new RenderThread[10];

    /**
     * Creates new form NewJPanel
     */
    public NewJPanel() {
        initComponents();
        for (int i = 0; i < rands.length; ++i) {
            rands[i] = 1;
        }

        for (int i = 0; i < pool.length; ++i) {
            pool[i] = new RenderThread();
            pool[i].start();
        }
    }

    double rands[] = new double[100];

    @Override
    public void paintComponent(Graphics g) {
        g.setColor(Color.black);
        g.fillRect(0, 0, getWidth(), getHeight());

        int dh = 10;
        for (int b = 0; b < getHeight(); b += dh) {
            boolean found = false;

            do {
                for (RenderThread t : pool) {
                    if (!t.compute) {
                        found = true;
                        t.a0 = 0;
                        t.a1 = getWidth();
                        t.b0 = b;
                        t.b1 = b + dh;
                        t.g = g;
                        t.compute = true;
                        break;
                    }
                }
            } while (!found);
        }

        boolean found;
        do {
            found = false;
            for (RenderThread t : pool) {
                found |= t.compute;
            }
        } while (found);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
